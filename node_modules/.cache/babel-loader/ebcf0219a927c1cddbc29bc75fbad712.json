{"ast":null,"code":"import _defineProperty from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialData;\n\n    _this.onDragEnd = function (result) {\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      var column = _this.state.columns[source.droppableId];\n      var newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      var newColumn = _objectSpread({}, column, {\n        taskIds: newTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n      });\n\n      _this.setState(newState);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, this.state.columnOrder.map(function (columnId) {\n        var column = _this2.state.columns[columnId];\n        var tasks = column.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        return React.createElement(Column, {\n          key: column.id,\n          column: column,\n          tasks: tasks,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/src/index.js"],"names":["React","ReactDOM","DragDropContext","initialData","Column","App","state","onDragEnd","result","destination","source","draggableId","droppableId","index","column","columns","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","columnOrder","map","columnId","tasks","taskId","Component","render","document","getElementById"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,qBAAP;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQH,W;;UAERI,S,GAAY,UAAAC,MAAM,EAAI;AAAA,UACZC,WADY,GACyBD,MADzB,CACZC,WADY;AAAA,UACCC,MADD,GACyBF,MADzB,CACCE,MADD;AAAA,UACSC,WADT,GACyBH,MADzB,CACSG,WADT;;AAGpB,UAAI,CAACF,WAAL,EAAkB;AAChB;AACD;;AAED,UACEA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAF/B,EAGE;AACA;AACD;;AAED,UAAMC,MAAM,GAAG,MAAKR,KAAL,CAAWS,OAAX,CAAmBL,MAAM,CAACE,WAA1B,CAAf;AACA,UAAMI,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,OAAlB,CAAnB;AACAH,MAAAA,UAAU,CAACI,MAAX,CAAkBV,MAAM,CAACG,KAAzB,EAAgC,CAAhC;AACAG,MAAAA,UAAU,CAACI,MAAX,CAAkBX,WAAW,CAACI,KAA9B,EAAqC,CAArC,EAAwCF,WAAxC;;AAEA,UAAMU,SAAS,qBACVP,MADU;AAEbK,QAAAA,OAAO,EAAEH;AAFI,QAAf;;AAKA,UAAMM,QAAQ,qBACT,MAAKhB,KADI;AAEZS,QAAAA,OAAO,oBACF,MAAKT,KAAL,CAAWS,OADT,sBAEJM,SAAS,CAACE,EAFN,EAEWF,SAFX;AAFK,QAAd;;AAQA,YAAKG,QAAL,CAAcF,QAAd;AACD,K;;;;;;;6BAEQ;AAAA;;AACP,aACE,oBAAC,eAAD;AAAiB,QAAA,SAAS,EAAE,KAAKf,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKD,KAAL,CAAWmB,WAAX,CAAuBC,GAAvB,CAA2B,UAAAC,QAAQ,EAAI;AACtC,YAAMb,MAAM,GAAG,MAAI,CAACR,KAAL,CAAWS,OAAX,CAAmBY,QAAnB,CAAf;AACA,YAAMC,KAAK,GAAGd,MAAM,CAACK,OAAP,CAAeO,GAAf,CAAmB,UAAAG,MAAM;AAAA,iBAAI,MAAI,CAACvB,KAAL,CAAWsB,KAAX,CAAiBC,MAAjB,CAAJ;AAAA,SAAzB,CAAd;AAEA,eAAO,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAEf,MAAM,CAACS,EAApB;AAAwB,UAAA,MAAM,EAAET,MAAhC;AAAwC,UAAA,KAAK,EAAEc,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,OALA,CADH,CADF;AAUD;;;;EAjDe5B,KAAK,CAAC8B,S;;AAoDxB7B,QAAQ,CAAC8B,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const column = this.state.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newColumn.id]: newColumn,\n      },\n    };\n\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        {this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}