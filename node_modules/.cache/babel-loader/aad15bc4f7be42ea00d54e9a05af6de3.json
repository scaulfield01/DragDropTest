{"ast":null,"code":"import _defineProperty from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/src/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nvar Container = styled.div(_templateObject());\n\nvar InnerList =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(InnerList, _React$PureComponent);\n\n  function InnerList() {\n    _classCallCheck(this, InnerList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InnerList).apply(this, arguments));\n  }\n\n  _createClass(InnerList, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          column = _this$props.column,\n          taskMap = _this$props.taskMap,\n          index = _this$props.index;\n      var tasks = column.taskIds.map(function (taskId) {\n        return taskMap[taskId];\n      });\n      return React.createElement(Column, {\n        column: column,\n        tasks: tasks,\n        index: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return InnerList;\n}(React.PureComponent);\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = initialData;\n\n    _this.onDragEnd = function (result) {\n      var _objectSpread3;\n\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId,\n          type = result.type;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        return;\n      }\n\n      if (type === 'column') {\n        var newColumnOrder = Array.from(_this.state.columnOrder);\n        newColumnOrder.splice(source.index, 1);\n        newColumnOrder.splice(destination.index, 0, draggableId);\n\n        var _newState = _objectSpread({}, _this.state, {\n          columnOrder: newColumnOrder\n        });\n\n        _this.setState(_newState);\n\n        return;\n      }\n\n      var home = _this.state.columns[source.droppableId];\n      var foreign = _this.state.columns[destination.droppableId];\n\n      if (home === foreign) {\n        var newTaskIds = Array.from(home.taskIds);\n        newTaskIds.splice(source.index, 1);\n        newTaskIds.splice(destination.index, 0, draggableId);\n\n        var _newHome = _objectSpread({}, home, {\n          taskIds: newTaskIds\n        });\n\n        var _newState2 = _objectSpread({}, _this.state, {\n          columns: _objectSpread({}, _this.state.columns, _defineProperty({}, _newHome.id, _newHome))\n        });\n\n        _this.setState(_newState2);\n\n        return;\n      } // moving from one list to another\n\n\n      var homeTaskIds = Array.from(home.taskIds);\n      homeTaskIds.splice(source.index, 1);\n\n      var newHome = _objectSpread({}, home, {\n        taskIds: homeTaskIds\n      });\n\n      var foreignTaskIds = Array.from(foreign.taskIds);\n      foreignTaskIds.splice(destination.index, 0, draggableId);\n\n      var newForeign = _objectSpread({}, foreign, {\n        taskIds: foreignTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, newHome.id, newHome), _defineProperty(_objectSpread3, newForeign.id, newForeign), _objectSpread3))\n      });\n\n      _this.setState(newState);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Droppable, {\n        droppableId: \"all-columns\",\n        direction: \"horizontal\",\n        type: \"column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, function (provided) {\n        return React.createElement(Container, Object.assign({}, provided.droppableProps, {\n          innerRef: provided.innerRef,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }), _this2.state.columnOrder.map(function (columnId, index) {\n          var column = _this2.state.columns[columnId];\n          return React.createElement(InnerList, {\n            key: column.id,\n            column: column,\n            taskMap: _this2.state.tasks,\n            index: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          });\n        }), provided.placeholder);\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/stephencaulfield/Desktop/Programing/dnd/trelloclone/src/index.js"],"names":["React","ReactDOM","styled","DragDropContext","Droppable","initialData","Column","Container","div","InnerList","props","column","taskMap","index","tasks","taskIds","map","taskId","PureComponent","App","state","onDragEnd","result","destination","source","draggableId","type","droppableId","newColumnOrder","Array","from","columnOrder","splice","newState","setState","home","columns","foreign","newTaskIds","newHome","id","homeTaskIds","foreignTaskIds","newForeign","provided","droppableProps","innerRef","columnId","placeholder","Component","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nclass InnerList extends React.PureComponent {\n  render() {\n    const { column, taskMap, index } = this.props;\n    const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n    return <Column column={column} tasks={tasks} index={index} />;\n  }\n}\n\nclass App extends React.Component {\n  state = initialData;\n\n  onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder,\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const home = this.state.columns[source.droppableId];\n    const foreign = this.state.columns[destination.droppableId];\n\n    if (home === foreign) {\n      const newTaskIds = Array.from(home.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newHome = {\n        ...home,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newHome.id]: newHome,\n        },\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // moving from one list to another\n    const homeTaskIds = Array.from(home.taskIds);\n    homeTaskIds.splice(source.index, 1);\n    const newHome = {\n      ...home,\n      taskIds: homeTaskIds,\n    };\n\n    const foreignTaskIds = Array.from(foreign.taskIds);\n    foreignTaskIds.splice(destination.index, 0, draggableId);\n    const newForeign = {\n      ...foreign,\n      taskIds: foreignTaskIds,\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newHome.id]: newHome,\n        [newForeign.id]: newForeign,\n      },\n    };\n    this.setState(newState);\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable\n          droppableId=\"all-columns\"\n          direction=\"horizontal\"\n          type=\"column\"\n        >\n          {provided => (\n            <Container\n              {...provided.droppableProps}\n              innerRef={provided.innerRef}\n            >\n              {this.state.columnOrder.map((columnId, index) => {\n                const column = this.state.columns[columnId];\n                return (\n                  <InnerList\n                    key={column.id}\n                    column={column}\n                    taskMap={this.state.tasks}\n                    index={index}\n                  />\n                );\n              })}\n              {provided.placeholder}\n            </Container>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}